{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Win10\\\\Desktop\\\\full stack\\\\Dell Project\\\\frontend\\\\src\\\\components\\\\ReportsChart.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ReportsTable from './ReportsTable';\nimport ReportsChart from './ReportsChart';\nimport { Container } from '@mui/material';\nimport FailureChart from '../components/FailureChart';\nconst ReportsPage = () => {\n  const [reports, setReports] = useState([]);\n  const [passCount, setPassCount] = useState(0);\n  const [failCount, setFailCount] = useState(0);\n  const [unresolvedCount, setUnresolvedCount] = useState(0);\n  const [filteredTests, setFilteredTests] = useState(null); // State to manage filtered tests\n\n  useEffect(() => {\n    axios.get('http://localhost:3000/api/reports').then(response => {\n      const reportsData = response.data;\n      const pass = reportsData.reduce((acc, report) => acc + report.testResults.filter(result => result === 'Success').length, 0);\n      const fail = reportsData.reduce((acc, report) => acc + report.testResults.filter(result => result === 'Failure').length, 0);\n      const unresolved = reportsData.reduce((acc, report) => acc + report.testResults.filter(result => result === 'Unresolved').length, 0);\n      setReports(reportsData);\n      setPassCount(pass);\n      setFailCount(fail);\n      setUnresolvedCount(unresolved);\n    }).catch(error => console.error('Error fetching the reports:', error));\n  }, []);\n  const handleFilter = status => {\n    if (status === 'Failure') {\n      // Collect only the tests that failed\n      const failedTests = reports.flatMap(report => report.testResults.map((result, index) => result === 'Failure' ? {\n        ...report,\n        test: report.tests[index],\n        result: 'Failure'\n      } : null).filter(Boolean));\n      setFilteredTests(failedTests);\n    } else {\n      setFilteredTests(null); // Reset to show all tests\n    }\n  };\n  const handlePassRateClick = () => {\n    setFilteredTests(null); // Reset to show all tests\n  };\n  return /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ReportsChart, {\n    passCount: passCount,\n    failCount: failCount,\n    unresolvedCount: unresolvedCount,\n    totalTests: passCount + failCount + unresolvedCount,\n    onSegmentClick: handleFilter // Pass the filter handler to the chart\n    ,\n    onPassRateClick: handlePassRateClick // Pass the reset handler to the chart\n    ,\n    reports: reports,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FailureChart, {\n    reports: reports,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ReportsTable, {\n    reports: filteredTests || reports,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), \" \");\n};\nexport default ReportsPage;","map":{"version":3,"names":["React","useState","useEffect","axios","ReportsTable","ReportsChart","Container","FailureChart","ReportsPage","reports","setReports","passCount","setPassCount","failCount","setFailCount","unresolvedCount","setUnresolvedCount","filteredTests","setFilteredTests","get","then","response","reportsData","data","pass","reduce","acc","report","testResults","filter","result","length","fail","unresolved","catch","error","console","handleFilter","status","failedTests","flatMap","map","index","test","tests","Boolean","handlePassRateClick","createElement","maxWidth","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","totalTests","onSegmentClick","onPassRateClick"],"sources":["C:/Users/Win10/Desktop/full stack/Dell Project/frontend/src/components/ReportsChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ReportsTable from './ReportsTable';\nimport ReportsChart from './ReportsChart';\nimport { Container } from '@mui/material';\nimport FailureChart from '../components/FailureChart';\n\nconst ReportsPage = () => {\n  const [reports, setReports] = useState([]);\n  const [passCount, setPassCount] = useState(0);\n  const [failCount, setFailCount] = useState(0);\n  const [unresolvedCount, setUnresolvedCount] = useState(0);\n  const [filteredTests, setFilteredTests] = useState(null); // State to manage filtered tests\n\n  useEffect(() => {\n    axios.get('http://localhost:3000/api/reports')\n      .then(response => {\n        const reportsData = response.data;\n\n        const pass = reportsData.reduce((acc, report) => acc + report.testResults.filter(result => result === 'Success').length, 0);\n        const fail = reportsData.reduce((acc, report) => acc + report.testResults.filter(result => result === 'Failure').length, 0);\n        const unresolved = reportsData.reduce((acc, report) => acc + report.testResults.filter(result => result === 'Unresolved').length, 0);\n\n        setReports(reportsData);\n        setPassCount(pass);\n        setFailCount(fail);\n        setUnresolvedCount(unresolved);\n      })\n      .catch(error => console.error('Error fetching the reports:', error));\n  }, []);\n\n  const handleFilter = (status) => {\n    if (status === 'Failure') {\n      // Collect only the tests that failed\n      const failedTests = reports.flatMap(report => \n        report.testResults\n          .map((result, index) => result === 'Failure' ? { ...report, test: report.tests[index], result: 'Failure' } : null)\n          .filter(Boolean)\n      );\n      setFilteredTests(failedTests);\n    } else {\n      setFilteredTests(null); // Reset to show all tests\n    }\n  };\n\n  const handlePassRateClick = () => {\n    setFilteredTests(null); // Reset to show all tests\n  };\n\n  return (\n    <Container maxWidth=\"lg\">\n      <ReportsChart \n        passCount={passCount} \n        failCount={failCount} \n        unresolvedCount={unresolvedCount} \n        totalTests={passCount + failCount + unresolvedCount} \n        onSegmentClick={handleFilter} // Pass the filter handler to the chart\n        onPassRateClick={handlePassRateClick} // Pass the reset handler to the chart\n        reports={reports} \n      />\n      <FailureChart reports={reports} />\n      <ReportsTable reports={filteredTests || reports} /> {/* Show filtered or all reports */}\n    </Container>\n  );\n};\n\nexport default ReportsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}