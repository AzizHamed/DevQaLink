{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Win10\\\\Desktop\\\\full stack\\\\Dell Project\\\\frontend\\\\src\\\\components\\\\ReportsPage.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ReportsTable from './ReportsTable';\nimport ReportsChart from './ReportsChart';\nimport { Container, Box } from '@mui/material';\nconst ReportsPage = () => {\n  const [reports, setReports] = useState([]);\n  const [passCount, setPassCount] = useState(0);\n  const [failCount, setFailCount] = useState(0);\n  const [unresolvedCount, setUnresolvedCount] = useState(0);\n  const [filteredReports, setFilteredReports] = useState(null); // State to manage filtered reports\n\n  useEffect(() => {\n    axios.get('http://localhost:3000/api/reports').then(response => {\n      setReports(response.data);\n      const pass = response.data.filter(report => report.result === 'Pass').length;\n      const fail = response.data.filter(report => report.result === 'Fail').length;\n      const unresolved = response.data.filter(report => report.result === 'Unresolved').length;\n      setPassCount(pass);\n      setFailCount(fail);\n      setUnresolvedCount(unresolved);\n    }).catch(error => console.error('Error fetching the reports:', error));\n  }, []);\n  const handleFilter = status => {\n    if (status) {\n      const filtered = reports.filter(report => report.result === status);\n      setFilteredReports(filtered);\n    } else {\n      setFilteredReports(null); // Reset to show all reports\n    }\n  };\n  return /*#__PURE__*/React.createElement(Container, {\n    maxWidth: \"lg\",\n    sx: {\n      backgroundColor: '#f4f6f8',\n      padding: '20px',\n      borderRadius: '10px',\n      boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    mb: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ReportsChart, {\n    passCount: passCount,\n    failCount: failCount,\n    unresolvedCount: unresolvedCount,\n    totalTests: reports.length,\n    onSegmentClick: handleFilter // Pass the filter handler to the chart\n    ,\n    reports: reports,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(ReportsTable, {\n    reports: filteredReports || reports,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }), \" \");\n};\nexport default ReportsPage;","map":{"version":3,"names":["React","useState","useEffect","axios","ReportsTable","ReportsChart","Container","Box","ReportsPage","reports","setReports","passCount","setPassCount","failCount","setFailCount","unresolvedCount","setUnresolvedCount","filteredReports","setFilteredReports","get","then","response","data","pass","filter","report","result","length","fail","unresolved","catch","error","console","handleFilter","status","filtered","createElement","maxWidth","sx","backgroundColor","padding","borderRadius","boxShadow","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","display","flexDirection","alignItems","mb","totalTests","onSegmentClick"],"sources":["C:/Users/Win10/Desktop/full stack/Dell Project/frontend/src/components/ReportsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport ReportsTable from './ReportsTable';\nimport ReportsChart from './ReportsChart';\nimport { Container, Box } from '@mui/material';\n\nconst ReportsPage = () => {\n  const [reports, setReports] = useState([]);\n  const [passCount, setPassCount] = useState(0);\n  const [failCount, setFailCount] = useState(0);\n  const [unresolvedCount, setUnresolvedCount] = useState(0);\n  const [filteredReports, setFilteredReports] = useState(null); // State to manage filtered reports\n\n  useEffect(() => {\n    axios.get('http://localhost:3000/api/reports')\n      .then(response => {\n        setReports(response.data);\n\n        const pass = response.data.filter(report => report.result === 'Pass').length;\n        const fail = response.data.filter(report => report.result === 'Fail').length;\n        const unresolved = response.data.filter(report => report.result === 'Unresolved').length;\n\n        setPassCount(pass);\n        setFailCount(fail);\n        setUnresolvedCount(unresolved);\n      })\n      .catch(error => console.error('Error fetching the reports:', error));\n  }, []);\n\n  const handleFilter = (status) => {\n    if (status) {\n      const filtered = reports.filter(report => report.result === status);\n      setFilteredReports(filtered);\n    } else {\n      setFilteredReports(null); // Reset to show all reports\n    }\n  };\n\n  return (\n    <Container maxWidth=\"lg\" sx={{ backgroundColor: '#f4f6f8', padding: '20px', borderRadius: '10px', boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)' }}>\n      <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\" mb={4}>\n        <ReportsChart \n          passCount={passCount} \n          failCount={failCount} \n          unresolvedCount={unresolvedCount} \n          totalTests={reports.length} \n          onSegmentClick={handleFilter} // Pass the filter handler to the chart\n          reports={reports} \n        />\n      </Box>\n      <ReportsTable reports={filteredReports || reports} /> {/* Show filtered or all reports */}\n    </Container>\n  );\n};\n\nexport default ReportsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}